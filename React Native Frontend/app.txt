import React, { Component } from 'react';
import { AppRegistry, Text, View, StyleSheet, TextInput, Button, Alert, Dimensions, Image, ScrollView, RefreshControl, FlatList, Linking, TouchableOpacity} from 'react-native';
const Orientation = require('./Orientation.js');

//------------------------------------------------------------------------------

export class list extends Component {

}

export default class app extends Component {

  constructor(props) {
    super(props);

    this.state = {
        data: [],
        orientation: Orientation.isPortrait() ? 'portrait' : 'landscape',
        devicetype: Orientation.isTablet() ? 'tablet' : 'phone',
        refreshing: false,
        visible: false,
        pointer: '▶',
        width: undefined,
        height: undefined,
        x: undefined,
        y: undefined
    };

    // Event Listener for orientation changes
    Dimensions.addEventListener('change', () => {
        this.setState({
            orientation: Orientation.isPortrait() ? 'portrait' : 'landscape'
        });
        dimensions = Dimensions.get('window');
        this.forceUpdate();
    });
  }

  // function to switch between the different arrow to read more or less
  showHideTextComponentView = () => {
      if(this.state.visible == true){
        this.setState({visible: false, pointer: '▶'})
      }else{
        this.setState({visible: true, pointer: '▼'})
      }
  }

  //save the current height and width of an component
  onLayout = (e) => {
    this.setState({
      width: e.nativeEvent.layout.width,
      height: e.nativeEvent.layout.height,
      x: e.nativeEvent.layout.x,
      y: e.nativeEvent.layout.y
    })
  }

  //fetch data from url into json
  fetchData = async () => {
      const response = await fetch('');
      const json = response.json();
      this.setState({date: json});
  }

  //refresh the current view
  _onRefresh = () => {
      this.setState({refreshing: true});
      this.fetchData().then(() => {
      this.setState({refreshing: false});
    })
  }

  componentWillMount() {
    this.fetchData();
  }

  handleClick = () => {
    Linking.canOpenURL(this.props.url).then(supported => {
      if (supported) {
        Linking.openURL(this.props.url);
      } else {
        console.log("Don't know how to open URI: " + this.props.url);
      }
    })
  }

  render() {
    var height = this.state.height;
    var width = this.state.width;
    var dimensions = Dimensions.get('window');

      return (
        <View>
          <View>
            <ScrollView refreshControl={
              <RefreshControl
                refreshing={this.state.refreshing}
                onRefresh={this._onRefresh.bind(this)}
              />
            }>
                <View style={[styles.row, styles.marginExeptBottom, {backgroundColor:'blue'}]}>
                    {/*large image of the article*/}
                    <View onLayout={this.onLayout} style={{flex:1}}>
                      <TouchableOpacity onPress={this.handleClick}>
                        <Image
                          style={{flex:1, height: undefined, width: undefined, aspectRatio: 1}}
                          source={require('./images/Turtle.jpg')}
                          resizeMode="contain"
                        />
                      </TouchableOpacity>
                    </View>
                    <View style={[styles.column, {flex:2.5, justifyContent:'flex-start', backgroundColor:'red', padding: 10}]}>
                      {/*image and name of the publisher*/}
                      <View style={[styles.row, {flex:1, backgroundColor:'purple'}]}>
                        <View style={{flex:1}}>
                          <Image
                            style={{flex:1, height: dimensions.height*.03, aspectRatio: 1}}
                            source={require('./images/Turtle.jpg')}
                            resizeMode="cover"
                          />
                        </View>
                        <Text style={{flex:7, fontSize: dimensions.width/40, alignSelf:'center', paddingLeft: dimensions.width/50}}>
                          Tagesschau
                        </Text>
                      </View>
                      {/*heading of the article*/}
                      <View style={{flex:4, justifyContent: 'flex-start'}}>
                        <Text style={[{fontWeight: 'bold', fontSize: dimensions.width/30}]}>
                          Neue App vorgestellt und noch viel mehr
                        </Text>
                      </View>
                    </View>
                    <View style={{flex:.5}}>
                      {/*time since article was retrieved and button to show more text*/}
                      <View style={{flexDirection:'column', flex:1, justifyContent:'space-between', alignItems:'center', backgroundColor:'green'}}>
                        <View style={{flex:4}}>
                          {/*maybe place for a share button*/}
                        </View>
                        <Text style={{flex:2, justifyContent: 'center', fontSize: dimensions.width/50}}>
                          10 min
                        </Text>
                        <View style={{flex:1, justifyContent:'center'}}>
                          <Button
                            onPress={this.showHideTextComponentView}
                            title={this.state.pointer}
                            color="black"
                          />
                        </View>
                      </View>
                    </View>
                </View>
                <View style={styles.column, styles.marginAll}>
                  {
                    this.state.visible ? <Text style={{fontSize: dimensions.width/35}}>Diese App stellt ein Konzept dar, wie die Graf News App letztlich aussehen könnte. Die Formatierung stimmt noch nicht, doch wird dies noch angepasst.</Text> : null
                  }
                </View>
              </ScrollView>
          </View>
        </View>
      );
  }
}

//------------------------------------------------------------------------------

/*var articles = {
  "articles": [
    {
    "publisher": "tagesschau",
    "author": "",
    "date": "26.02.2018 10:20",
    "topic": "Neue App",
    "title": "Neue News-App GrafNews erobert den Markt",
    "text": "Diese App stellt ein Konzept dar, wie die Graf News App letztlich aussehen könnte. Die Formatierung stimmt noch nicht, doch wird dies noch angepasst.",
    },
    {
    "publisher": "heute",
    "author": "Max Mustermann",
    "date": "26.02.2018 10:20",
    "topic": "Noch eine App",
    "title": "Neue News-App GrafNews erobert den Markt",
    "text": "Diese App stellt ein Konzept dar, wie die Graf News App letztlich aussehen könnte. Die Formatierung stimmt noch nicht, doch wird dies noch angepasst.",
    },
  ],
}*/

//------------------------------------------------------------------------------

const styles = StyleSheet.create({
  column: {
    flex: 1,
    flexDirection: 'column',
    justifyContent: 'flex-start',
    alignItems: 'flex-start',
  },
  heading: {
    color: 'black',
    fontWeight: 'bold',
    fontSize: 44,
  },
  headingSmall: {
    color: 'black',
    fontWeight: 'bold',
    fontSize: 30,
  },
  iconSmall: {
    height: 48,
    width: 48,
  },
  iconLarge: {
    height: 128,
    width: 128,
  },
  marginExeptBottom: {
    marginTop : 20,
    marginLeft : 10,
    marginRight : 10,
  },
  marginExeptTop: {
    marginBottom : 20,
    marginLeft : 10,
    marginRight : 10,
  },
  marginAll: {
    marginTop : 20,
    marginBottom : 20,
    marginLeft : 10,
    marginRight : 10,
  },
  row: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'flex-start',
  },
});

//
