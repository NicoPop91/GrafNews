'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.geocode = exports.geocodeExact = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _taggedTemplateLiteral2 = require('babel-runtime/helpers/taggedTemplateLiteral');

var _taggedTemplateLiteral3 = _interopRequireDefault(_taggedTemplateLiteral2);

var geocodeExact = exports.geocodeExact = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(address) {
    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultQuery;
    var url, response, json, promise;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            url = 'https://maps.googleapis.com/maps/api/geocode/json?address=' + encodeURI(address) + '&sensor=false';
            response = void 0, json = void 0;
            promise = new _promise2.default(function () {
              var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(resolve, reject) {
                var preciseResults;
                return _regenerator2.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return fetch(url);

                      case 3:
                        response = _context.sent;
                        _context.next = 9;
                        break;

                      case 6:
                        _context.prev = 6;
                        _context.t0 = _context['catch'](0);

                        reject(Error('Couldn\'t connect to Geocoding API.'));

                      case 9:
                        _context.prev = 9;
                        _context.next = 12;
                        return response.json();

                      case 12:
                        json = _context.sent;
                        _context.next = 18;
                        break;

                      case 15:
                        _context.prev = 15;
                        _context.t1 = _context['catch'](9);

                        reject(Error('Failed to get json.'));

                      case 18:
                        preciseResults = json.results.filter(function (result) {
                          if (result.geometry.location_type !== 'APPROXIMATE') {
                            return result;
                          }
                        });


                        if (preciseResults.length > 0) {
                          try {
                            resolve((0, _graphqlAnywhere2.default)(resolver, query, { results: preciseResults }));
                          } catch (error) {
                            reject(Error(error));
                          }
                        } else {
                          reject(Error('All results were approximate'));
                        }

                      case 20:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _callee, this, [[0, 6], [9, 15]]);
              }));

              return function (_x3, _x4) {
                return _ref2.apply(this, arguments);
              };
            }());
            return _context2.abrupt('return', promise);

          case 4:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function geocodeExact(_x2) {
    return _ref.apply(this, arguments);
  };
}();

var geocode = exports.geocode = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(address) {
    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultQuery;
    var url, response, json;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            url = 'https://maps.googleapis.com/maps/api/geocode/json?address=' + encodeURI(address) + '&sensor=false';
            _context3.prev = 1;
            _context3.next = 4;
            return fetch(url);

          case 4:
            response = _context3.sent;
            _context3.next = 7;
            return response.json();

          case 7:
            json = _context3.sent;
            return _context3.abrupt('return', (0, _graphqlAnywhere2.default)(resolver, query, json));

          case 11:
            _context3.prev = 11;
            _context3.t0 = _context3['catch'](1);

          case 13:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this, [[1, 11]]);
  }));

  return function geocode(_x6) {
    return _ref3.apply(this, arguments);
  };
}();

var _templateObject = (0, _taggedTemplateLiteral3.default)(['\n{\n  results {\n     formatted_address\n     geometry {\n       location {\n         lat\n         lng\n       }\n     }\n   }\n }\n'], ['\n{\n  results {\n     formatted_address\n     geometry {\n       location {\n         lat\n         lng\n       }\n     }\n   }\n }\n']); /* global geocode geocodeExact fetch */
/* exported geocode geocodeExact */

var _graphqlTag = require('graphql-tag');

var _graphqlTag2 = _interopRequireDefault(_graphqlTag);

var _graphqlAnywhere = require('graphql-anywhere');

var _graphqlAnywhere2 = _interopRequireDefault(_graphqlAnywhere);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Define a resolver that just returns a property
var resolver = function resolver(fieldName, root) {
  return root[fieldName];
};

var defaultQuery = (0, _graphqlTag2.default)(_templateObject);

var geox = { geocode: geocode, geocodeExact: geocodeExact };
exports.default = geox;